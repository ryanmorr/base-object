{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","base-object.min.js","src/base-object.js","src/util.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","BaseObject","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_typeof","Symbol","iterator","obj","constructor","_util","propertyDefaults","_id","properties","uid","initialize","_this","getOwnPropertyNames","forEach","prop","removeProperty","destroy","warn","name","hasOwnProperty","arguments","undefined","merge","hasProperty","map","create","getPrototypeOf","hashCode","getProperties","msg","print","formatMessage","getClass","JSON","stringify","keys","reduce","getClassName","_len","mixins","Array","_key","apply","concat","_len2","args","_key2","Function","bind","subclass","./util","2","has","assign","item","len","Date","now","toString","counter","type","console","id","hash","slice","toLowerCase","str","_i","charCodeAt"],"mappings":"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","file":"base-object.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! base-object v0.2.0 | https://github.com/ryanmorr/base-object */\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.BaseObject = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }; /**\r\n                                                                                                                                                                                                                                                   * Import dependencies\r\n                                                                                                                                                                                                                                                   */\n\n\nvar _util = require('./util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Define default property descriptors\r\n */\nvar propertyDefaults = {\n    enumerable: true,\n    configurable: true,\n    writable: true\n};\n\n/**\r\n * Name of the `id` property, use Symbol\r\n * if supported as a means of protection\r\n */\nvar _id = function () {\n    if (typeof Symbol === 'function' && _typeof(Symbol()) === 'symbol') {\n        return Symbol('id');\n    }\n    return '$id';\n}();\n\n/**\r\n * Abstract class to provide additional\r\n * functionality and helper methods for\r\n * other classes to inherit\r\n *\r\n * @class BaseObject\r\n * @api public\r\n */\n\nvar BaseObject = function () {\n\n    /**\r\n     * Instantiate the class, optionally provided\r\n     * a key/value map of configuration properties\r\n     *\r\n     * @constructor\r\n     * @param {Object} properties (optional)\r\n     * @api public\r\n     */\n    function BaseObject(properties) {\n        _classCallCheck(this, BaseObject);\n\n        this.defineProperty(_id, (0, _util.uid)(), {\n            enumerable: false,\n            configurable: false,\n            writable: false\n        });\n        if (properties) {\n            this.defineProperties(properties);\n        }\n        this.initialize();\n    }\n\n    /**\r\n     * Initialize the instance, override this\r\n     * and not the constructor\r\n     *\r\n     * @api public\r\n     */\n\n\n    _createClass(BaseObject, [{\n        key: 'initialize',\n        value: function initialize() {}\n\n        /**\r\n         * Class destructor to purge references\r\n         *\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var _this = this;\n\n            Object.getOwnPropertyNames(this).forEach(function (prop) {\n                if (prop !== _id) {\n                    _this.removeProperty(prop);\n                }\n            });\n            // Ensure `destroy` can only be called once\n            this.destroy = function () {\n                return _this.warn('Instance already destroyed');\n            };\n            return this;\n        }\n\n        /**\r\n         * Return the unique identifier for\r\n         * this instance\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'id',\n        value: function id() {\n            return this[_id];\n        }\n\n        /**\r\n         * Define properties for the instance\r\n         *\r\n         * @param {Object} properties\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'defineProperties',\n        value: function defineProperties(properties) {\n            for (var name in properties) {\n                if ((0, _util.hasOwnProperty)(properties, name)) {\n                    this.defineProperty(name, properties[name]);\n                }\n            }\n            return this;\n        }\n\n        /**\r\n         * Define a property for the instance\r\n         * and optionally provide a descriptor\r\n         *\r\n         * @param {String} name\r\n         * @param {*} value\r\n         * @param {Object} descriptor (optional)\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'defineProperty',\n        value: function defineProperty(name, value) {\n            var descriptor = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n            Object.defineProperty(this, name, (0, _util.merge)({ value: value }, propertyDefaults, descriptor));\n            return this;\n        }\n\n        /**\r\n         * Check the existence of an instance\r\n         * property\r\n         *\r\n         * @param {String} name\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'hasProperty',\n        value: function hasProperty(name) {\n            return name in this;\n        }\n\n        /**\r\n         * Get the value of an instance property\r\n         *\r\n         * @param {String} name\r\n         * @return {*}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'getProperty',\n        value: function getProperty(name) {\n            return this.hasProperty(name) ? this[name] : null;\n        }\n\n        /**\r\n         * Set the value of an instance property,\r\n         * differs from `defineProperty` by not\r\n         * including descriptor\r\n         *\r\n         * @param {String} name\r\n         * @param {*} value\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'setProperty',\n        value: function setProperty(name, value) {\n            this[name] = value;\n            return this;\n        }\n\n        /**\r\n         * Remove an instance property if it exists\r\n         *\r\n         * @param {String} name\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'removeProperty',\n        value: function removeProperty(name) {\n            if (!this.hasProperty(name)) {\n                this.warn('\"' + name + '\" property does not exist');\n            } else {\n                delete this[name];\n            }\n            return this;\n        }\n\n        /**\r\n         * Get the instance properties in a\r\n         * key/value hash map\r\n         *\r\n         * @return {Object}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'getProperties',\n        value: function getProperties() {\n            var map = Object.create(null);\n            var obj = this;\n            do {\n                // eslint-disable-next-line no-loop-func\n                Object.getOwnPropertyNames(obj).forEach(function (prop) {\n                    if (prop !== _id && !(prop in map)) {\n                        map[prop] = obj[prop];\n                    }\n                });\n            } while (obj = Object.getPrototypeOf(obj));\n            return map;\n        }\n\n        /**\r\n         * Generate a hash code for an instance\r\n         * based on its properties\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'hashCode',\n        value: function hashCode() {\n            return (0, _util.hashCode)(this.getProperties());\n        }\n\n        /**\r\n         * Log to the console\r\n         *\r\n         * @param {String} msg\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'log',\n        value: function log(msg) {\n            (0, _util.print)('log', (0, _util.formatMessage)(this, msg));\n            return this;\n        }\n\n        /**\r\n         * Log a warning to the console\r\n         *\r\n         * @param {String} msg\r\n         * @return {BaseObject}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'warn',\n        value: function warn(msg) {\n            (0, _util.print)('warn', (0, _util.formatMessage)(this, msg));\n            return this;\n        }\n\n        /**\r\n         * Throw an error that is identifiable to\r\n         * the originating class and instance\r\n         *\r\n         * @param {String} msg\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'error',\n        value: function error(msg) {\n            throw new Error((0, _util.formatMessage)(this, msg));\n        }\n\n        /**\r\n         * Get the class object\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'getClass',\n        value: function getClass() {\n            return this.constructor;\n        }\n\n        /**\r\n         * Get the name of the class as a\r\n         * string\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'getClassName',\n        value: function getClassName() {\n            return this.getClass().name;\n        }\n\n        /**\r\n         * Convert a hash map of instance properties\r\n         * (not including functions) into a JSON\r\n         * string\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'toJSON',\n        value: function toJSON() {\n            var props = this.getProperties();\n            return JSON.stringify(Object.keys(props).reduce(function (map, key) {\n                if (typeof props[key] === 'function') {\n                    return map;\n                }\n                map[key] = props[key];\n                return map;\n            }, {}));\n        }\n\n        /**\r\n         * Get the instance type\r\n         *\r\n         * @return {String}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'toString',\n        value: function toString() {\n            return '[object ' + this.getClassName() + ']';\n        }\n\n        /**\r\n         * Return an integer representation when the\r\n         * instance is converted to a primitive\r\n         *\r\n         * @return {Number}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'valueOf',\n        value: function valueOf() {\n            return this.hashCode();\n        }\n\n        /**\r\n         * Add properties to the class prototype\r\n         *\r\n         * @static\r\n         * @param {...Object} mixins\r\n         * @api public\r\n         */\n\n    }], [{\n        key: 'mixin',\n        value: function mixin() {\n            for (var _len = arguments.length, mixins = Array(_len), _key = 0; _key < _len; _key++) {\n                mixins[_key] = arguments[_key];\n            }\n\n            _util.merge.apply(undefined, [this.prototype].concat(mixins));\n        }\n\n        /**\r\n         * Instaniate the class\r\n         *\r\n         * @static\r\n         * @param {...*} args\r\n         * @return {Object}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'factory',\n        value: function factory() {\n            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n            }\n\n            return new (Function.prototype.bind.apply(this, [null].concat(args)))();\n        }\n\n        /**\r\n         * Inherit from class\r\n         *\r\n         * @static\r\n         * @param {Function} subclass\r\n         * @return {Function}\r\n         * @api public\r\n         */\n\n    }, {\n        key: 'extend',\n        value: function extend(subclass) {\n            subclass.prototype = Object.create(this.prototype, {\n                constructor: {\n                    value: subclass\n                }\n            });\n            return subclass;\n        }\n    }]);\n\n    return BaseObject;\n}();\n\nexports.default = BaseObject;\nmodule.exports = exports['default'];\n\n},{\"./util\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.hasOwnProperty = hasOwnProperty;\nexports.merge = merge;\nexports.uid = uid;\nexports.print = print;\nexports.formatMessage = formatMessage;\nexports.hashCode = hashCode;\n/**\r\n * Common variables\r\n */\nvar counter = 0;\nvar toString = {}.toString;\nvar has = {}.hasOwnProperty;\n\n/**\r\n * Determine whether an object has the specified\r\n * property as a direct property of that object\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @return {Boolean}\r\n * @api public\r\n */\nfunction hasOwnProperty(obj, name) {\n    return has.call(obj, name);\n}\n\n/**\r\n * Copy properties from one or more objects\r\n * to a target object\r\n *\r\n * @param {Object} obj\r\n * @param {...Object} properties\r\n * @return {Object}\r\n * @api public\r\n */\nfunction merge(obj) {\n    for (var _len = arguments.length, props = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        props[_key - 1] = arguments[_key];\n    }\n\n    if (Object.assign) {\n        return Object.assign.apply(Object, [obj].concat(props));\n    }\n    for (var i = 0, len = props.length, item; i < len; i++) {\n        item = props[i];\n        for (var key in item) {\n            if (hasOwnProperty(item, key)) {\n                obj[key] = item[key];\n            }\n        }\n    }\n    return obj;\n}\n\n/**\r\n * Generate a unique ID\r\n *\r\n * @return {String}\r\n * @api public\r\n */\nfunction uid() {\n    return Date.now().toString(36) + (counter++).toString(36);\n}\n\n/**\r\n * Print a message to the console\r\n *\r\n * @param {String} type\r\n * @param {String} msg\r\n * @api public\r\n */\nfunction print(type, msg) {\n    /* eslint-disable no-console */\n    if (console && type in console) {\n        console[type](msg);\n    }\n    /* eslint-enable no-console */\n}\n\n/**\r\n * Format a message to be identifiable to\r\n * the originating class and instance\r\n *\r\n * @param {Object} obj\r\n * @param {String} msg\r\n * @return {String}\r\n * @api public\r\n */\nfunction formatMessage(obj, msg) {\n    return obj.getClassName() + '(#' + obj.id() + '): ' + msg;\n}\n\n/**\r\n * Generate a hash code for an object\r\n * based on its value/indexed items/properties\r\n *\r\n * @param {*} obj\r\n * @return {Number}\r\n * @api public\r\n */\nfunction hashCode(obj) {\n    var hash = 0;\n    var type = toString.call(obj).slice(8, -1).toLowerCase();\n    switch (type) {\n        case 'null':\n        case 'undefined':\n            return 0;\n        case 'array':\n            for (var i = 0, len = obj.length; i < len; i++) {\n                hash += hashCode(i + hashCode(obj[i]));\n            }\n            return hash;\n        case 'object':\n            for (var prop in obj) {\n                hash += hashCode(prop + hashCode(obj[prop]));\n            }\n            return hash;\n        default:\n            var str = obj.toString();\n            for (var _i = 0, _len2 = str.length; _i < _len2; _i++) {\n                hash = (hash << 5) - hash + str.charCodeAt(_i) & 0xFFFFFFFF;\n            }\n            return hash;\n    }\n}\n\n},{}]},{},[1])(1)\n});\n\n","/**\r\n * Import dependencies\r\n */\r\nimport { hasOwnProperty, merge, uid, print, formatMessage, hashCode } from './util';\r\n\r\n/**\r\n * Define default property descriptors\r\n */\r\nconst propertyDefaults = {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true\r\n};\r\n\r\n/**\r\n * Name of the `id` property, use Symbol\r\n * if supported as a means of protection\r\n */\r\nconst id = (() => {\r\n    if (typeof Symbol === 'function' && typeof Symbol() === 'symbol') {\r\n        return Symbol('id');\r\n    }\r\n    return '$id';\r\n})();\r\n\r\n/**\r\n * Abstract class to provide additional\r\n * functionality and helper methods for\r\n * other classes to inherit\r\n *\r\n * @class BaseObject\r\n * @api public\r\n */\r\nexport default class BaseObject {\r\n\r\n    /**\r\n     * Instantiate the class, optionally provided\r\n     * a key/value map of configuration properties\r\n     *\r\n     * @constructor\r\n     * @param {Object} properties (optional)\r\n     * @api public\r\n     */\r\n    constructor(properties) {\r\n        this.defineProperty(id, uid(), {\r\n            enumerable: false,\r\n            configurable: false,\r\n            writable: false\r\n        });\r\n        if (properties) {\r\n            this.defineProperties(properties);\r\n        }\r\n        this.initialize();\r\n    }\r\n\r\n    /**\r\n     * Initialize the instance, override this\r\n     * and not the constructor\r\n     *\r\n     * @api public\r\n     */\r\n    initialize() {}\r\n\r\n    /**\r\n     * Class destructor to purge references\r\n     *\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    destroy() {\r\n        Object.getOwnPropertyNames(this).forEach((prop) => {\r\n            if (prop !== id) {\r\n                this.removeProperty(prop);\r\n            }\r\n        });\r\n        // Ensure `destroy` can only be called once\r\n        this.destroy = () => this.warn('Instance already destroyed');\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return the unique identifier for\r\n     * this instance\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    id() {\r\n        return this[id];\r\n    }\r\n\r\n    /**\r\n     * Define properties for the instance\r\n     *\r\n     * @param {Object} properties\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    defineProperties(properties) {\r\n        for (const name in properties) {\r\n            if (hasOwnProperty(properties, name)) {\r\n                this.defineProperty(name, properties[name]);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Define a property for the instance\r\n     * and optionally provide a descriptor\r\n     *\r\n     * @param {String} name\r\n     * @param {*} value\r\n     * @param {Object} descriptor (optional)\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    defineProperty(name, value, descriptor = {}) {\r\n        Object.defineProperty(this, name, merge({value}, propertyDefaults, descriptor));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Check the existence of an instance\r\n     * property\r\n     *\r\n     * @param {String} name\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    hasProperty(name) {\r\n        return name in this;\r\n    }\r\n\r\n    /**\r\n     * Get the value of an instance property\r\n     *\r\n     * @param {String} name\r\n     * @return {*}\r\n     * @api public\r\n     */\r\n    getProperty(name) {\r\n        return this.hasProperty(name) ? this[name] : null;\r\n    }\r\n\r\n    /**\r\n     * Set the value of an instance property,\r\n     * differs from `defineProperty` by not\r\n     * including descriptor\r\n     *\r\n     * @param {String} name\r\n     * @param {*} value\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    setProperty(name, value) {\r\n        this[name] = value;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an instance property if it exists\r\n     *\r\n     * @param {String} name\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    removeProperty(name) {\r\n        if (!this.hasProperty(name)) {\r\n            this.warn(`\"${name}\" property does not exist`);\r\n        } else {\r\n            delete this[name];\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the instance properties in a\r\n     * key/value hash map\r\n     *\r\n     * @return {Object}\r\n     * @api public\r\n     */\r\n    getProperties() {\r\n        const map = Object.create(null);\r\n        let obj = this;\r\n        do {\r\n            // eslint-disable-next-line no-loop-func\r\n            Object.getOwnPropertyNames(obj).forEach((prop) => {\r\n                if (prop !== id && !(prop in map)) {\r\n                    map[prop] = obj[prop];\r\n                }\r\n            });\r\n        } while ((obj = Object.getPrototypeOf(obj)));\r\n        return map;\r\n    }\r\n\r\n    /**\r\n     * Generate a hash code for an instance\r\n     * based on its properties\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    hashCode() {\r\n        return hashCode(this.getProperties());\r\n    }\r\n\r\n    /**\r\n     * Log to the console\r\n     *\r\n     * @param {String} msg\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    log(msg) {\r\n        print('log', formatMessage(this, msg));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Log a warning to the console\r\n     *\r\n     * @param {String} msg\r\n     * @return {BaseObject}\r\n     * @api public\r\n     */\r\n    warn(msg) {\r\n        print('warn', formatMessage(this, msg));\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Throw an error that is identifiable to\r\n     * the originating class and instance\r\n     *\r\n     * @param {String} msg\r\n     * @api public\r\n     */\r\n    error(msg) {\r\n        throw new Error(formatMessage(this, msg));\r\n    }\r\n\r\n    /**\r\n     * Get the class object\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    getClass() {\r\n        return this.constructor;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the class as a\r\n     * string\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    getClassName() {\r\n        return this.getClass().name;\r\n    }\r\n\r\n    /**\r\n     * Convert a hash map of instance properties\r\n     * (not including functions) into a JSON\r\n     * string\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    toJSON() {\r\n        const props = this.getProperties();\r\n        return JSON.stringify(Object.keys(props).reduce((map, key) => {\r\n            if (typeof props[key] === 'function') {\r\n                return map;\r\n            }\r\n            map[key] = props[key];\r\n            return map;\r\n        }, {}));\r\n    }\r\n\r\n    /**\r\n     * Get the instance type\r\n     *\r\n     * @return {String}\r\n     * @api public\r\n     */\r\n    toString() {\r\n        return `[object ${this.getClassName()}]`;\r\n    }\r\n\r\n    /**\r\n     * Return an integer representation when the\r\n     * instance is converted to a primitive\r\n     *\r\n     * @return {Number}\r\n     * @api public\r\n     */\r\n    valueOf() {\r\n        return this.hashCode();\r\n    }\r\n\r\n    /**\r\n     * Add properties to the class prototype\r\n     *\r\n     * @static\r\n     * @param {...Object} mixins\r\n     * @api public\r\n     */\r\n    static mixin(...mixins) {\r\n        merge(this.prototype, ...mixins);\r\n    }\r\n\r\n    /**\r\n     * Instaniate the class\r\n     *\r\n     * @static\r\n     * @param {...*} args\r\n     * @return {Object}\r\n     * @api public\r\n     */\r\n    static factory(...args) {\r\n        return new this(...args);\r\n    }\r\n\r\n    /**\r\n     * Inherit from class\r\n     *\r\n     * @static\r\n     * @param {Function} subclass\r\n     * @return {Function}\r\n     * @api public\r\n     */\r\n    static extend(subclass) {\r\n        subclass.prototype = Object.create(this.prototype, {\r\n            constructor: {\r\n                value: subclass\r\n            }\r\n        });\r\n        return subclass;\r\n    }\r\n}\r\n","/**\r\n * Common variables\r\n */\r\nlet counter = 0;\r\nconst toString = {}.toString;\r\nconst has = {}.hasOwnProperty;\r\n\r\n/**\r\n * Determine whether an object has the specified\r\n * property as a direct property of that object\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @return {Boolean}\r\n * @api public\r\n */\r\nexport function hasOwnProperty(obj, name) {\r\n    return has.call(obj, name);\r\n}\r\n\r\n/**\r\n * Copy properties from one or more objects\r\n * to a target object\r\n *\r\n * @param {Object} obj\r\n * @param {...Object} properties\r\n * @return {Object}\r\n * @api public\r\n */\r\nexport function merge(obj, ...props) {\r\n    if (Object.assign) {\r\n        return Object.assign(obj, ...props);\r\n    }\r\n    for (let i = 0, len = props.length, item; i < len; i++) {\r\n        item = props[i];\r\n        for (const key in item) {\r\n            if (hasOwnProperty(item, key)) {\r\n                obj[key] = item[key];\r\n            }\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * Generate a unique ID\r\n *\r\n * @return {String}\r\n * @api public\r\n */\r\nexport function uid() {\r\n    return (Date.now().toString(36) + (counter++).toString(36));\r\n}\r\n\r\n/**\r\n * Print a message to the console\r\n *\r\n * @param {String} type\r\n * @param {String} msg\r\n * @api public\r\n */\r\nexport function print(type, msg) {\r\n    /* eslint-disable no-console */\r\n    if (console && type in console) {\r\n        console[type](msg);\r\n    }\r\n    /* eslint-enable no-console */\r\n}\r\n\r\n/**\r\n * Format a message to be identifiable to\r\n * the originating class and instance\r\n *\r\n * @param {Object} obj\r\n * @param {String} msg\r\n * @return {String}\r\n * @api public\r\n */\r\nexport function formatMessage(obj, msg) {\r\n    return `${obj.getClassName()}(#${obj.id()}): ${msg}`;\r\n}\r\n\r\n/**\r\n * Generate a hash code for an object\r\n * based on its value/indexed items/properties\r\n *\r\n * @param {*} obj\r\n * @return {Number}\r\n * @api public\r\n */\r\nexport function hashCode(obj) {\r\n    let hash = 0;\r\n    const type = toString.call(obj).slice(8, -1).toLowerCase();\r\n    switch (type) {\r\n        case 'null':\r\n        case 'undefined':\r\n            return 0;\r\n        case 'array':\r\n            for (let i = 0, len = obj.length; i < len; i++) {\r\n                hash += hashCode(i + hashCode(obj[i]));\r\n            }\r\n            return hash;\r\n        case 'object':\r\n            for (const prop in obj) {\r\n                hash += hashCode(prop + hashCode(obj[prop]));\r\n            }\r\n            return hash;\r\n        default:\r\n            const str = obj.toString();\r\n            for (let i = 0, len = str.length; i < len; i++) {\r\n                hash = (((hash << 5) - hash) + str.charCodeAt(i)) & 0xFFFFFFFF;\r\n            }\r\n            return hash;\r\n    }\r\n}\r\n"],"sourceRoot":"/source/"}